
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Step 1: Create a DataFrame from the survey data dictionary\n",
        "survey_data = {\n",
        "    'Product_Quality': [4, 5, 3, 4, 5, 4, 3, 5, 4, 2],\n",
        "    'Customer_Service': [5, 4, 3, 5, 4, 4, 3, 5, 5, 3],\n",
        "    'Pricing': [3, 4, 3, 2, 3, 4, 5, 2, 4, 3],\n",
        "    'Delivery_Speed': [5, 4, 4, 5, 4, 4, 3, 5, 5, 4],\n",
        "    'Satisfaction': [4, 5, 3, 4, 5, 4, 3, 5, 4, 2]  # Target variable\n",
        "}\n",
        "\n",
        "# Convert the dictionary to a Pandas DataFrame\n",
        "df = pd.DataFrame(survey_data)\n",
        "\n",
        "# Step 2: Perform correlation analysis\n",
        "# Calculate the correlation matrix\n",
        "correlation_matrix = df.corr()\n",
        "\n",
        "# Display the correlation matrix as a heatmap\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n",
        "plt.title('Correlation Matrix of Factors Affecting Customer Satisfaction')\n",
        "plt.show()\n",
        "\n",
        "# Step 3: Run Regression Analysis\n",
        "# Assuming 'Satisfaction' is the dependent variable\n",
        "X = df.drop(columns=['Satisfaction'])  # Independent variables (all factors except satisfaction)\n",
        "y = df['Satisfaction']  # Dependent variable (customer satisfaction)\n",
        "\n",
        "# Add constant to the independent variables (for the intercept in the regression model)\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Fit the regression model\n",
        "model = sm.OLS(y, X).fit()\n",
        "\n",
        "# Display the regression results\n",
        "print(model.summary())\n",
        "\n",
        "# Step 4: Visualize relationships (optional)\n",
        "# Plot a scatterplot for each factor against satisfaction\n",
        "for column in X.columns:\n",
        "    if column != 'const':  # Skip the constant\n",
        "        plt.figure(figsize=(6, 4))\n",
        "        sns.scatterplot(x=df[column], y=df['Satisfaction'])\n",
        "        plt.title(f'Satisfaction vs {column}')\n",
        "        plt.xlabel(column)\n",
        "        plt.ylabel('Satisfaction')\n",
        "        plt.show()\n"
      ]
    }
  ]
}
